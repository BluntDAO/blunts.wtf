/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Upgradeable__factory>;
    getContractFactory(
      name: "ERC721EnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721EnumerableUpgradeable__factory>;
    getContractFactory(
      name: "IERC721EnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721EnumerableUpgradeable__factory>;
    getContractFactory(
      name: "IERC721MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC721ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "IERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Upgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1271__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "ProxyAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyAdmin__factory>;
    getContractFactory(
      name: "TransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721Checkpointable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Checkpointable__factory>;
    getContractFactory(
      name: "ERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Enumerable__factory>;
    getContractFactory(
      name: "IProxyRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProxyRegistry__factory>;
    getContractFactory(
      name: "INounsDAO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INounsDAO__factory>;
    getContractFactory(
      name: "NounsDAOData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOData__factory>;
    getContractFactory(
      name: "NounsDAODataEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAODataEvents__factory>;
    getContractFactory(
      name: "NounsDAODataProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAODataProxy__factory>;
    getContractFactory(
      name: "ForkDAODeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ForkDAODeployer__factory>;
    getContractFactory(
      name: "INounsTokenForkLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INounsTokenForkLike__factory>;
    getContractFactory(
      name: "NounsDAOEventsFork",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOEventsFork__factory>;
    getContractFactory(
      name: "NounsDAOLogicV1Fork",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOLogicV1Fork__factory>;
    getContractFactory(
      name: "NounsDAOStorageV1Fork",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOStorageV1Fork__factory>;
    getContractFactory(
      name: "NounsAuctionHouseFork",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsAuctionHouseFork__factory>;
    getContractFactory(
      name: "ERC721CheckpointableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721CheckpointableUpgradeable__factory>;
    getContractFactory(
      name: "INounsTokenFork",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INounsTokenFork__factory>;
    getContractFactory(
      name: "NounsTokenFork",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsTokenFork__factory>;
    getContractFactory(
      name: "NounsDAOForkEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOForkEscrow__factory>;
    getContractFactory(
      name: "NounsDAOV3Fork",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOV3Fork__factory>;
    getContractFactory(
      name: "NounsDAOExecutor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOExecutor__factory>;
    getContractFactory(
      name: "NounsDAOExecutorProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOExecutorProxy__factory>;
    getContractFactory(
      name: "NounsDAOExecutorV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOExecutorV2__factory>;
    getContractFactory(
      name: "IForkDAODeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IForkDAODeployer__factory>;
    getContractFactory(
      name: "INounsDAOExecutor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INounsDAOExecutor__factory>;
    getContractFactory(
      name: "INounsDAOExecutorV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INounsDAOExecutorV2__factory>;
    getContractFactory(
      name: "INounsDAOForkEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INounsDAOForkEscrow__factory>;
    getContractFactory(
      name: "NounsDAOEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOEvents__factory>;
    getContractFactory(
      name: "NounsDAOEventsV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOEventsV2__factory>;
    getContractFactory(
      name: "NounsDAOEventsV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOEventsV3__factory>;
    getContractFactory(
      name: "NounsDAOProxyStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOProxyStorage__factory>;
    getContractFactory(
      name: "NounsDAOStorageV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOStorageV1__factory>;
    getContractFactory(
      name: "NounsDAOStorageV1Adjusted",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOStorageV1Adjusted__factory>;
    getContractFactory(
      name: "NounsDAOStorageV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOStorageV2__factory>;
    getContractFactory(
      name: "NounsTokenLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsTokenLike__factory>;
    getContractFactory(
      name: "NounsDAOLogicV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOLogicV1__factory>;
    getContractFactory(
      name: "NounsDAOLogicV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOLogicV2__factory>;
    getContractFactory(
      name: "NounsDAOLogicV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOLogicV3__factory>;
    getContractFactory(
      name: "NounsDAOProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOProxy__factory>;
    getContractFactory(
      name: "NounsDAOProxyV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOProxyV2__factory>;
    getContractFactory(
      name: "NounsDAOProxyV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOProxyV3__factory>;
    getContractFactory(
      name: "NounsDAOV3Admin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOV3Admin__factory>;
    getContractFactory(
      name: "NounsDAOV3DynamicQuorum",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOV3DynamicQuorum__factory>;
    getContractFactory(
      name: "NounsDAOV3Proposals",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOV3Proposals__factory>;
    getContractFactory(
      name: "NounsDAOV3Votes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOV3Votes__factory>;
    getContractFactory(
      name: "Inflator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Inflator__factory>;
    getContractFactory(
      name: "IInflator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInflator__factory>;
    getContractFactory(
      name: "INounsArt",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INounsArt__factory>;
    getContractFactory(
      name: "INounsAuctionHouse",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INounsAuctionHouse__factory>;
    getContractFactory(
      name: "INounsDescriptor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INounsDescriptor__factory>;
    getContractFactory(
      name: "INounsDescriptorMinimal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INounsDescriptorMinimal__factory>;
    getContractFactory(
      name: "INounsDescriptorV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INounsDescriptorV2__factory>;
    getContractFactory(
      name: "INounsSeeder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INounsSeeder__factory>;
    getContractFactory(
      name: "INounsToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INounsToken__factory>;
    getContractFactory(
      name: "ISVGRenderer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISVGRenderer__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "NFTDescriptorV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTDescriptorV2__factory>;
    getContractFactory(
      name: "NounsArt",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsArt__factory>;
    getContractFactory(
      name: "NounsAuctionHouse",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsAuctionHouse__factory>;
    getContractFactory(
      name: "NounsDescriptor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDescriptor__factory>;
    getContractFactory(
      name: "NounsDescriptorV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDescriptorV2__factory>;
    getContractFactory(
      name: "NounsSeeder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsSeeder__factory>;
    getContractFactory(
      name: "NounsToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsToken__factory>;
    getContractFactory(
      name: "NounsAuctionHouseProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsAuctionHouseProxy__factory>;
    getContractFactory(
      name: "NounsAuctionHouseProxyAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsAuctionHouseProxyAdmin__factory>;
    getContractFactory(
      name: "SVGRenderer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SVGRenderer__factory>;
    getContractFactory(
      name: "MaliciousBidder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MaliciousBidder__factory>;
    getContractFactory(
      name: "MaliciousVoter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MaliciousVoter__factory>;
    getContractFactory(
      name: "Multicall2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall2__factory>;
    getContractFactory(
      name: "Administered",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Administered__factory>;
    getContractFactory(
      name: "NounsDAOExecutorHarness",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOExecutorHarness__factory>;
    getContractFactory(
      name: "NounsDAOExecutorTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOExecutorTest__factory>;
    getContractFactory(
      name: "NounsDAOExecutorV2Test",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOExecutorV2Test__factory>;
    getContractFactory(
      name: "NounsDAOLogicV1Harness",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOLogicV1Harness__factory>;
    getContractFactory(
      name: "NounsDAOLogicV2Harness",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOLogicV2Harness__factory>;
    getContractFactory(
      name: "NounsDAOLogicV3Harness",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOLogicV3Harness__factory>;
    getContractFactory(
      name: "NounsTokenHarness",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsTokenHarness__factory>;
    getContractFactory(
      name: "Voter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Voter__factory>;
    getContractFactory(
      name: "WETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH__factory>;
    getContractFactory(
      name: "ERC20Transferer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Transferer__factory>;

    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Upgradeable>;
    getContractAt(
      name: "ERC721EnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721EnumerableUpgradeable>;
    getContractAt(
      name: "IERC721EnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721EnumerableUpgradeable>;
    getContractAt(
      name: "IERC721MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721MetadataUpgradeable>;
    getContractAt(
      name: "IERC721ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721ReceiverUpgradeable>;
    getContractAt(
      name: "IERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Upgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1271",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1271>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "ProxyAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyAdmin>;
    getContractAt(
      name: "TransparentUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721Checkpointable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Checkpointable>;
    getContractAt(
      name: "ERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Enumerable>;
    getContractAt(
      name: "IProxyRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProxyRegistry>;
    getContractAt(
      name: "INounsDAO",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INounsDAO>;
    getContractAt(
      name: "NounsDAOData",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOData>;
    getContractAt(
      name: "NounsDAODataEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAODataEvents>;
    getContractAt(
      name: "NounsDAODataProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAODataProxy>;
    getContractAt(
      name: "ForkDAODeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ForkDAODeployer>;
    getContractAt(
      name: "INounsTokenForkLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INounsTokenForkLike>;
    getContractAt(
      name: "NounsDAOEventsFork",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOEventsFork>;
    getContractAt(
      name: "NounsDAOLogicV1Fork",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOLogicV1Fork>;
    getContractAt(
      name: "NounsDAOStorageV1Fork",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOStorageV1Fork>;
    getContractAt(
      name: "NounsAuctionHouseFork",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsAuctionHouseFork>;
    getContractAt(
      name: "ERC721CheckpointableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721CheckpointableUpgradeable>;
    getContractAt(
      name: "INounsTokenFork",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INounsTokenFork>;
    getContractAt(
      name: "NounsTokenFork",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsTokenFork>;
    getContractAt(
      name: "NounsDAOForkEscrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOForkEscrow>;
    getContractAt(
      name: "NounsDAOV3Fork",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOV3Fork>;
    getContractAt(
      name: "NounsDAOExecutor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOExecutor>;
    getContractAt(
      name: "NounsDAOExecutorProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOExecutorProxy>;
    getContractAt(
      name: "NounsDAOExecutorV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOExecutorV2>;
    getContractAt(
      name: "IForkDAODeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IForkDAODeployer>;
    getContractAt(
      name: "INounsDAOExecutor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INounsDAOExecutor>;
    getContractAt(
      name: "INounsDAOExecutorV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INounsDAOExecutorV2>;
    getContractAt(
      name: "INounsDAOForkEscrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INounsDAOForkEscrow>;
    getContractAt(
      name: "NounsDAOEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOEvents>;
    getContractAt(
      name: "NounsDAOEventsV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOEventsV2>;
    getContractAt(
      name: "NounsDAOEventsV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOEventsV3>;
    getContractAt(
      name: "NounsDAOProxyStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOProxyStorage>;
    getContractAt(
      name: "NounsDAOStorageV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOStorageV1>;
    getContractAt(
      name: "NounsDAOStorageV1Adjusted",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOStorageV1Adjusted>;
    getContractAt(
      name: "NounsDAOStorageV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOStorageV2>;
    getContractAt(
      name: "NounsTokenLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsTokenLike>;
    getContractAt(
      name: "NounsDAOLogicV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOLogicV1>;
    getContractAt(
      name: "NounsDAOLogicV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOLogicV2>;
    getContractAt(
      name: "NounsDAOLogicV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOLogicV3>;
    getContractAt(
      name: "NounsDAOProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOProxy>;
    getContractAt(
      name: "NounsDAOProxyV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOProxyV2>;
    getContractAt(
      name: "NounsDAOProxyV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOProxyV3>;
    getContractAt(
      name: "NounsDAOV3Admin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOV3Admin>;
    getContractAt(
      name: "NounsDAOV3DynamicQuorum",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOV3DynamicQuorum>;
    getContractAt(
      name: "NounsDAOV3Proposals",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOV3Proposals>;
    getContractAt(
      name: "NounsDAOV3Votes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOV3Votes>;
    getContractAt(
      name: "Inflator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Inflator>;
    getContractAt(
      name: "IInflator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInflator>;
    getContractAt(
      name: "INounsArt",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INounsArt>;
    getContractAt(
      name: "INounsAuctionHouse",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INounsAuctionHouse>;
    getContractAt(
      name: "INounsDescriptor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INounsDescriptor>;
    getContractAt(
      name: "INounsDescriptorMinimal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INounsDescriptorMinimal>;
    getContractAt(
      name: "INounsDescriptorV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INounsDescriptorV2>;
    getContractAt(
      name: "INounsSeeder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INounsSeeder>;
    getContractAt(
      name: "INounsToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INounsToken>;
    getContractAt(
      name: "ISVGRenderer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISVGRenderer>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "NFTDescriptorV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTDescriptorV2>;
    getContractAt(
      name: "NounsArt",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsArt>;
    getContractAt(
      name: "NounsAuctionHouse",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsAuctionHouse>;
    getContractAt(
      name: "NounsDescriptor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDescriptor>;
    getContractAt(
      name: "NounsDescriptorV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDescriptorV2>;
    getContractAt(
      name: "NounsSeeder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsSeeder>;
    getContractAt(
      name: "NounsToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsToken>;
    getContractAt(
      name: "NounsAuctionHouseProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsAuctionHouseProxy>;
    getContractAt(
      name: "NounsAuctionHouseProxyAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsAuctionHouseProxyAdmin>;
    getContractAt(
      name: "SVGRenderer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SVGRenderer>;
    getContractAt(
      name: "MaliciousBidder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MaliciousBidder>;
    getContractAt(
      name: "MaliciousVoter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MaliciousVoter>;
    getContractAt(
      name: "Multicall2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall2>;
    getContractAt(
      name: "Administered",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Administered>;
    getContractAt(
      name: "NounsDAOExecutorHarness",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOExecutorHarness>;
    getContractAt(
      name: "NounsDAOExecutorTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOExecutorTest>;
    getContractAt(
      name: "NounsDAOExecutorV2Test",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOExecutorV2Test>;
    getContractAt(
      name: "NounsDAOLogicV1Harness",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOLogicV1Harness>;
    getContractAt(
      name: "NounsDAOLogicV2Harness",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOLogicV2Harness>;
    getContractAt(
      name: "NounsDAOLogicV3Harness",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOLogicV3Harness>;
    getContractAt(
      name: "NounsTokenHarness",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsTokenHarness>;
    getContractAt(
      name: "Voter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Voter>;
    getContractAt(
      name: "WETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH>;
    getContractAt(
      name: "ERC20Transferer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Transferer>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
